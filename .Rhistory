list.files()
if (!file.exists("pml-training.csv")) {
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
destfile = "pml-training.csv", method = "wget")
}
list.files()
#downloading the testing data
if (!file.exists("pml-testing.csv.csv")) {
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
destfile = "pml-testing.csv", method = "wget")
}
list.files()
pml_training<-read.csv("pml-training.csv")
pml_testing<-read.csv("pml-testing.csv")
head(pml_training)
table(pml_training$classe)
names(pml_training)
View(pml_training)
summary(pml_training)
q()
pml_training<-read.csv("pml-training.csv")
pml_testing<-read.csv("pml-testing.csv")
View(pml_training)
table(pml_training$new_window)
table(pml_training$num_window)
summary(pml_training$num_window)
summary(pml_training$roll_belt)
summary(pml_training$max_roll_belt)
summary(pml_training$max_picth_belt)
summary(pml_training$max_yaw_belt)
summary(pml_training$min_roll_belt)
table(is.na(pml_training$min_roll_belt))
table(is.na(pml_training$amplitude_roll_belt))
table(is.na(pml_training$amplitude_roll_dumbbell))
table(is.na(pml_training$amplitude_roll_forearm))
table(is.na(pml_training$avg_roll_belt))
table(is.na(pml_training$avg_roll_dumbbell))
table(is.na(pml_training$stddev_roll_belt))
table(is.na(pml_training$gyros_belt_x))
table(is.na(pml_training$roll_belt))
table(is.na(pml_training$accel_belt_x))
table(is.na(pml_training$magnet_belt_x))
table(is.na(pml_training$roll_arm))
summary(pml_training$roll_belt)
table(is.na(pml_training$kurtosis_roll_belt))
table(is.na(pml_training$new_window))
table(pml_training$new_window)
table(pml_training$roll_dumbbell)
table(is.na(pml_training$roll_dumbbell))
names<-names(pml_training)
subset<-grep("^roll_|^pitch|^yaw_|^total_accel|^gyros_|^accel_|^magnet",names,value=T)
subset
grep("total_",names,values=T)
grep("total_",names,value=T)
View(pml_testing)
a<-data.frame(names)
View(a)
head(a)
head(a,n=8)
subset<-grep("new_window|num_window|^roll_|^pitch|^yaw_|^total_accel|^gyros_|^accel_|^magnet|classe",names,value=T)
160-55
rm(a)
rm(subset)
subsetnames<-grep("new_window|num_window|^roll_|^pitch|^yaw_|^total_accel|^gyros_|^accel_|^magnet|classe",names,value=T)
pml_training2<- subset(pml_training,select=subsetnames)
View(pml_training2)
summary(pml_training2)
summary(pml_training2$total_accel_belt)
View(pml_training2)
a<-pml_training2[num_window==11,]
b<-pml_training2$num_window==11
table(b)
b<-pml_training2$num_window==12
table(b)
b<-pml_training2$num_window==13
table(b)
a<-pml_training2[b,]
View(a)
a2<-a[pml_training2!=="yes"]
a2<-a[pml_training2!=="yes",]
a2<-a[pml_training2$new_window!=="yes",]
a2<-a[pml_training2$new_window=="no",]
a2<-a[a$new_window=="no",]
mean(a2$roll_belt)
b<-pml_training$num_window==13
a<-pml_training[b,]
View(a)
?kurtosis
?base
a2<-a[a$new_window=="no",]
summary(a2)
summary(a2$roll_belt)
View(`a2`)
rm(a,a2,b)
table(is.na(pml_training2))
table(pml_training2$classe)
View(pml_testing)
table(pml_training$user_name)
View(pml_training2)
q()
###Preprocessing the data
library(caret)
#spliting pml_training2 into a trainig and a testing set
inTrain<-createDataPartition(y=pml_training2$classe,p=0.6,list=FALSE)
training<-pml_training2[inTrain,]
testing<-pml_training2[-inTrain,]
nsv<-nearZeroVar(training,saveMetrics=TRUE)
head(nsv)
table(nzv)
table(nsv$nzv)
a<-training[,-1]
rm(a)
training<-training[,-1]
str(training)
sapply(training,sd)
a<-sapply(training,sd)
a
a<-apply(training,sd)
a<-lapply(training,sd)
a
View(training)
names(training)
M<-abs(cor(training[,c(-1,-54)]))
rm(a)
M<-abs(cor(training[,c(-1,-54)]))
diag(M)<-0
View(M)
which(M>0.8,arr.ind=T)
which(M>0.9,arr.ind=T)
M<-abs(cor(training[,c(-1,-54)]))
diag(M)<-0
which(M>0.9,arr.ind=T)
View(M)
plot(training[,4],training[,1])
plot(training[,1],training[,4])
View(M)
plot(training[,1],training[,9])
plot(training[,1],training[,10])
plot(training[,2],training[,8])
plot(training[,33],training[,34])
plot(training[,31],training[,46])
a<-training[,c(-1,-54)]
plot(a[,1],a[,9])
plot(a[,1],a[,4])
plot(a[,1],a[,10])
plot(a[,2],a[,8])
plot(a[,33],a[,34])
plot(a[,31],a[,46])
plot(a[,33],a[,31])
max(a[,33])
a[317,]
b<-a[-317,]
plot(b[,33],b[,31])
max(a[,33])
min(a[,31])
c<-a[,33]==317
b<-a[c,]
b<-a[,c]
c<-a[,33]!==317
b<-a[,!c]
b<-a[!c,]
plot(b[,33],b[,31])
corr(b[,33],b[,31])
cor(b[,33],b[,31])
which(M>0.9,arr.ind=T)
plot(a[,18],a[,19])
plot(a[,9],a[,10])
cor(a[,9],a[,10])
plot(a[,4],a[,10])
View(M)
plot(b[,33],b[,31])
plot(a[,33],a[,31])
plot(log10(a[,33]),log10(a[,31]))
plot(log10(a[,33]+1),log10(a[,31]+1))
log10(-1)
plot(a[,33],a[,31])
plot(b[,33],b[,31])
names(a)[c(31,33)]
summary(a[,33])
summary(b[,33])
summary(a[,31])
summary(b[,31])
317/1000
-204/1000
M<-abs(cor(a[,c(-1,-54)]))
diag(M)<-0
which(M>0.8,arr.ind=T)
plot(a[,44],a[,45])
min(a[,44])
summary(a[,44])
summary(a[,45])
which(M>0.8,arr.ind=T)
plot(a[,30],a[,45])
plot(a[,28],a[,35])
cor(a[,28],a[,35])
M<-abs(cor(training[,c(-1,-54)]))
diag(M)<-0
which(M>0.9,arr.ind=T)
a<-training[,c(-1,-54)]
cor(a[,33],a[,46])
plot(a[,33],a[,46])
plot(a[,31],a[,46])
plot(a[,31],a[,33])
plot(a[,18],a[,19])
plot(a[,9],a[,10])
plot(a[,4],a[,10])
plot(a[,1],a[,10])
plot(a[,1])
View(a)
modfit<-train(classe~.,method="rpart",data=training)
print(modFit$finalModel)
print(modfit$finalModel)
plot(modfit$finalModel,uniform=T,main="Classification Tree")
text(modfit$finalModel,use.n=T,all=T,cex=.8)
summary(training$classe)
a<-training[,c(-1,-54)]
M<-abs(cor(training[,c(-1,-54)]))
diag(M)<-0
which(M>0.9,arr.ind=T)
plot(a[,33],a[,46])
names(a)[,c(33,46)]
names(a)[c(33,46)]
install.packages("rattle")
library(rattle)
fancyRpartplot(modfit$finalModel)
fancyRpartPlot(modfit$finalModel)
?install.packages
install.packages("rpart.plot")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
library(rattle)
fancyRpartPlot(modfit$finalModel)
q()
rm(a,b)
#EXTRACTING ONLY THE MEASUREMENTS
names<-names(pml_training)
subsetnames<-grep("^roll_|^pitch|^yaw_|^total_accel|^gyros_|^accel_|^magnet|classe",names,value=T)
#creating a subset with the variables selected
pml_training2<-subset(pml_training,select=subsetnames)
library(caret)
set.seed(2014)
inTrain<-createDataPartition(y=pml_training2$classe,p=0.6,list=FALSE)
training<-pml_training2[inTrain,]
testing<-pml_training2[-inTrain,]
nsv<-nearZeroVar(training,saveMetrics=TRUE)
table(nsv$nzv)
M<-abs(cor(training[,-53]))
diag(M)<-0
which(M>0.9,arr.ind=T)
#PREDICTING WITH TREES
library(rpart)
set.seed(2014)
modfit<-train(classe~.,method="rpart",data=training)
print(modfit$finalModel)
plot(modfit$finalModel,uniform=T,main="Classification Tree")
text(modfit$finalModel,use.n=T,all=T,cex=.8)
predicted<-predict(modfit,newdata=testing)
confusionMatrix(testing$classe,predict(modfit,testing))
which(M>0.9,arr.ind=T)
plot(training[,1],training[,4])
plot(log(training[,1]+30),training[,4])
which(M>0.8,arr.ind=T)
plot(training[,29],training[,36])
plot(training[,28],training[,34])
plot(training[,25],training[,26])
plot(training[,21],training[,24])
plot(training[,18],training[,19])
plot(training[,8],training[,11])
plot(training[,2],training[,11])
plot(training[,9],training[,10])
plot(training[,9],training[,4])
plot(training[,9],training[,1])
smalltrainig<-training[,c(1,2,3,4,8,9,10,11,18,19,21,24,25,26,28,29,34,36)]
prComp<-prcomp(smalltrainig)
summary(prComp)
a<-prComp$x[,1]
a<-prComp$x[,c(1,2,3)]
View(a)
smalltesting<-testing[,c(1,2,3,4,8,9,10,11,18,19,21,24,25,26,28,29,34,36)]
smalltesting<-testing[,c(1,2,3,4,8,9,10,11,18,19,21,24,25,26,28,29,34,36)]
testingPC<-predict(prComp,smalltesting)
View(testingPC)
testingPC<-predict(prComp,smalltesting)[,c(1,2,3)]
View(testingPC)
View(a)
rm(a)
rm(testingPC)
rm(c)
smtestingPC<-predict(prComp,smalltesting)[,c(1,2,3)]
smtrainingPC<-prComp[,c(1,2,3)]
smtrainingPC<-prComp[,c(1,2,3)]
prComp<-prcomp(smalltrainig)
smtrainingPC<-prComp$x[,c(1,2,3)]
smalltesting<-testing[,c(1,2,3,4,8,9,10,11,18,19,21,24,25,26,28,29,34,36)]
smtestingPC<-predict(prComp,smalltesting)[,c(1,2,3)]
View(smtrainingPC)
smalltraing1<-training[,-c(1,2,3,4,8,9,10,11,18,19,21,24,25,26,28,29,34,36)]
35+18
smalltraining1<-cbind(smtrainingPC,smalltraing1)
View(smalltraining1)
library(rpart)
set.seed(2014)
modfit<-train(classe~.,method="rpart",data=smalltraining1)
print(modfit$finalModel)
plot(modfit$finalModel,uniform=T,main="Classification Tree")
text(modfit$finalModel,use.n=T,all=T,cex=.8)
library(rattle)
fancyRpartPlot(modfit$finalModel)
smalltrating1<-testing[,-c(1,2,3,4,8,9,10,11,18,19,21,24,25,26,28,29,34,36)]
smalltesting1<-testing[,-c(1,2,3,4,8,9,10,11,18,19,21,24,25,26,28,29,34,36)]
smalltrainig<-training[,c(1,2,3,4,8,9,10,11,18,19,21,24,25,26,28,29,34,36)]
smalltraing1<-training[,-c(1,2,3,4,8,9,10,11,18,19,21,24,25,26,28,29,34,36)]
prComp<-prcomp(smalltrainig)
smtrainingPC<-prComp$x[,c(1,2,3)]
smalltraining1<-cbind(smtrainingPC,smalltraing1)
smalltesting<-testing[,c(1,2,3,4,8,9,10,11,18,19,21,24,25,26,28,29,34,36)]
smalltesting1<-testing[,-c(1,2,3,4,8,9,10,11,18,19,21,24,25,26,28,29,34,36)]
smtestingPC<-predict(prComp,smalltesting)[,c(1,2,3)]
smalltesting1<-cbind(smtestingPC,smalltesting1)
predicted<-predict(modfit,newdata=smalltesting1)
confusionMatrix(testing$classe,predict(modfit,smalltesting1))
rm(list=ls())
#downloading the training data
if (!file.exists("pml-training.csv")) {
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
destfile = "pml-training.csv", method = "wget")
}
if (!file.exists("pml-testing.csv.csv")) {
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
destfile = "pml-testing.csv", method = "wget")
}
pml_training<-read.csv("pml-training.csv")
pml_testing<-read.csv("pml-testing.csv")
names<-names(pml_training)
subsetnames<-grep("^roll_|^pitch|^yaw_|^total_accel|^gyros_|^accel_|^magnet|classe",names,value=T)
pml_training2<-subset(pml_training,select=subsetnames)
library(caret)
set.seed(2014)
inTrain<-createDataPartition(y=pml_training2$classe,p=0.6,list=FALSE)
training<-pml_training2[inTrain,]
testing<-pml_training2[-inTrain,]
library(rpart)
set.seed(2014)
modfit<-train(classe~.,method="rpart",data=training)
print(modfit$finalModel)
plot(modfit$finalModel,uniform=T,main="Classification Tree")
text(modfit$finalModel,use.n=T,all=T,cex=.8)
predicted<-predict(modfit,newdata=testing)
table(predicted)
confusionMatrix(testing$classe,predict(modfit,testing))
smalltrainig<-training[,c(1,2,3,4,8,9,10,11,18,19,21,24,25,26,28,29,34,36)]
smalltraning1<-training[,-c(1,2,3,4,8,9,10,11,18,19,21,24,25,26,28,29,34,36)]
rm(smalltrainig,smalltraning1)
smalltraining<-training[,c(1,2,3,4,8,9,10,11,18,19,21,24,25,26,28,29,34,36)]
smalltraining1<-training[,-c(1,2,3,4,8,9,10,11,18,19,21,24,25,26,28,29,34,36)]
prComp<-prcomp(smalltraining)
smalltraining1<-cbind(smtrainingPC,smalltraining1)
prComp<-prcomp(smalltraining)
smtrainingPC<-prComp$x[,c(1,2,3)]
smalltraining1<-cbind(smtrainingPC,smalltraining1)
set.seed(2014)
modfit<-train(classe~.,method="rpart",data=smalltraining1)
print(modfit$finalModel)
plot(modfit$finalModel,uniform=T,main="Classification Tree")
text(modfit$finalModel,use.n=T,all=T,cex=.8)
smalltesting<-testing[,c(1,2,3,4,8,9,10,11,18,19,21,24,25,26,28,29,34,36)]
smalltesting1<-testing[,-c(1,2,3,4,8,9,10,11,18,19,21,24,25,26,28,29,34,36)]
smtestingPC<-predict(prComp,smalltesting)[,c(1,2,3)]
smalltesting1<-cbind(smtestingPC,smalltesting1)
predicted<-predict(modfit,newdata=smalltesting1)
table(predicted)
table(testing)
table(testing$classe)
confusionMatrix(smalltesting1$classe,predict(modfit,smalltesting1))
preProc <- preProcess(training[, -53], method = "pca", thresh = 0.9)
preProc <- preProcess(training[, -53], method = "pca", thresh = 0.9)
trainingPC <- predict(preProc, training[, -53])
testingPC <- predict(preProc, testing[, -53])
modelFit <- train(training$classe ~., method = "rf", data = trainingPC,
trControl = trainControl(method = "cv",  number = 4),
importance = TRUE)
modelFit
predicted<-predict(modfit,newdata=testing)
confusionMatrix(testing$classe,predict(modfit,testing))
predicted<-predict(modelFit,newdata=testing)
confusionMatrix(testing$classe,predict(modelFit,testing))
predicted<-predict(modelFit,newdata=testing)
predicted<-predict(modelFit,newdata=testingPC)
confusionMatrix(testing$classe,predict(modelFit,testingPC))
q()
